// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["postgresqlExtensions"] // Enable pgvector
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector] // Declare that we're using the pgvector extension
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  chatConversations ChatConversation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// T3-Chat Specific Models

model ChatConversation {
  id        String      @id @default(cuid())
  userId    String
  title     String      @default("New Chat")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  ChatMessage[]

  @@index([userId])
}

model ChatMessage {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // "user" or "assistant" or "system"
  content        String   @db.Text
  createdAt      DateTime @default(now())

  conversation ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model KnowledgeBaseDocument {
  id        String   @id @default(cuid())
  name      String
  filePath  String?  // Optional: path to the original file
  sourceUrl String?  // Optional: URL if sourced from the web
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chunks DocumentChunk[]
}

model DocumentChunk {
  id          String   @id @default(cuid())
  documentId  String
  content     String   @db.Text
  pageNumber  Int?     // Optional: for PDF page number
  metadata    Json?    // Optional: any other metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  document   KnowledgeBaseDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  embeddings VectorEmbedding[]

  @@index([documentId])
}

model VectorEmbedding {
  id        String   @id @default(cuid())
  chunkId   String   @unique // Each chunk has one embedding for a given model
  model     String   // e.g., "text-embedding-ada-002"
  embedding Unsupported("vector(1536)") // Example: OpenAI embeddings dimension
  createdAt DateTime @default(now())

  chunk DocumentChunk @relation(fields: [chunkId], references: [id], onDelete: Cascade)
}
